plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.61'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

repositories {
    mavenCentral()
    // required to fix
    // 'Could not find com.soywiz.korlibs.korio:korio-jvm:1.8.1'
    // (this is a dependency of antlr-kotlin)
    jcenter()
    maven { url 'https://www.jitpack.io' }
}

kotlin {
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    // Creates a JVM target with the default name 'jvm'
    jvm {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "1.8"
        }

        compilations.main.compileKotlinTask // get the Kotlin task 'compileKotlinJvm'
        compilations.main.output // get the main compilation output
        compilations.test.runtimeDependencyFiles // get the test runtime classpath
    }

    // Configure all compilations of all targets:
    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'com.github.kotlinx.ast:grammar-kotlin-parser-antlr-kotlin:5db757217c'
            }
        }
        commonTest {
        }
        jvmMain {
            dependencies {
                api 'com.github.kotlinx.ast:grammar-kotlin-parser-antlr-kotlin-jvm:5db757217c'
            }
        }
    }
}

task buildJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    manifest {
        attributes 'Main-Class': 'sample.MainKt'
    }
    def target = kotlin.targets.jvm
    from target.compilations.main.output
    def runtimeClasspath = target.compilations.main.runtimeDependencyFiles
    configurations = [runtimeClasspath]
}

// Use the following Gradle tasks to run your application:
// :runReleaseExecutableMingw - without debug symbols
// :runDebugExecutableMingw - with debug symbols